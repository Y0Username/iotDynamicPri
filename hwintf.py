#!/usr/bin/pythonfrom mininet.net import Mininetfrom mininet.node import Controller, RemoteController, OVSControllerfrom mininet.node import CPULimitedHost, Host, Nodefrom mininet.node import OVSKernelSwitch, UserSwitchfrom mininet.node import IVSSwitchfrom mininet.cli import CLIfrom mininet.log import setLogLevel, infofrom mininet.link import TCLink, Intffrom subprocess import calldef myNetwork():    net = Mininet( topo=None,                  build=False,                  ipBase='10.0.0.0/8',                  autoSetMacs=True)    info( '*** Adding controller\n' )    c0=net.addController(name='c0',                         controller=RemoteController,                        ip='192.168.56.103',                        port=6633)    info( '*** Add switches\n')    ##############################################################################################    # 1. setup an dummy switch that will connects host(s) in miniet to an interface on the machine/VM    #    need to work in failmode standalone mode    s6 = net.addSwitch('s6', cls=OVSKernelSwitch, failMode='standalone')    ##############################################################################################    s5 = net.addSwitch('s5', cls=OVSKernelSwitch)    s4 = net.addSwitch('s4', cls=OVSKernelSwitch)    s2 = net.addSwitch('s2', cls=OVSKernelSwitch)    s3 = net.addSwitch('s3', cls=OVSKernelSwitch)    s1 = net.addSwitch('s1', cls=OVSKernelSwitch)    ##############################################################################################    # 2. Connect the dummy switch to the interface on the machine/VM                  Intf('eth1', node=s6)    ##############################################################################################    info( '*** Add hosts\n')    h1 = net.addHost('h1', cls=Host, ip='10.0.0.1', defaultRoute=None)    h2 = net.addHost('h2', cls=Host, ip='10.0.0.2', defaultRoute=None)    h3 = net.addHost('h3', cls=Host, ip='10.0.0.3', defaultRoute=None)    h4 = net.addHost('h4', cls=Host, ip='10.0.0.4', defaultRoute=None)    info( '*** Add links\n')    net.addLink(s2, h4)    ##############################################################################################    # 3. For the host that need to connect to outside of mininet environment(to controller/internet),    #    at least two interfaces are needed. One is normally connected to mininet following the desired topology,    #    another is connected to the dummy switch we created(further connect to outside machine/VM interface).    #    Please reminds to assign the interface name properly on the host    ##############################################################################################    # 3.1 First interface (noraml)    net.addLink(h1, s1, intfName1='h1-eth0')    ##############################################################################################    net.addLink(s1, h2)    net.addLink(s1, s3)    s3s4 = {'bw':5,'delay':'10ms','loss':1,'jitter':'2ms'}    net.addLink(s3, s4, cls=TCLink , **s3s4)    s2s1 = {'bw':20,'delay':'10ms','loss':1,'jitter':'2ms'}    net.addLink(s2, s1, cls=TCLink , **s2s1)    net.addLink(s5, s2)    net.addLink(s5, s4)    net.addLink(s5, h3)    ##############################################################################################    # 3.1 Second interface (connects to dummy switch)    net.addLink(h1, s6, intfName1='h1-eth1')    ##############################################################################################    info( '*** Starting network\n')    net.build()    info( '*** Starting controllers\n')    for controller in net.controllers:        controller.start()    info( '*** Starting switches\n')  	##############################################################################################    # 4. Starts the switch without connecting it to controller    net.get('s6').start([])    ##############################################################################################    net.get('s5').start([c0])    net.get('s4').start([c0])    net.get('s2').start([c0])    net.get('s3').start([c0])    net.get('s1').start([c0])    info( '*** Post configure switches and hosts\n')  	##############################################################################################    # 5. Configure the MAC address and IP address of the host interface that connects to dummy switch    info('*** Configure h1\'s controller communication interface\n')    h1.cmd('ifconfig h1-eth1 hw ether 00:00:00:00:01:11')    info('*** Configure h1\'s IP address\n')    h1.cmd('dhclient h1-eth1')    ##############################################################################################    CLI(net)    net.stop()if __name__ == '__main__':    setLogLevel( 'info' )    myNetwork()